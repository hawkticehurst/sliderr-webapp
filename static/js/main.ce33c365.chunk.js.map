{"version":3,"sources":["components/common/PrimaryButton.tsx","components/welcome/Welcome.tsx","components/controller/setup/ConnectSlider.tsx","slider/bluetooth.ts","components/controller/setup/SetSliderBoundaries.tsx","components/controller/setup/SliderSetup.tsx","components/common/NavBar.tsx","components/common/WideButton.tsx","components/controller/controls/SliderController.tsx","components/controller/controls/SliderControls.tsx","components/controller/SliderController.tsx","components/App.tsx","index.tsx"],"names":["PrimaryButton","buttonText","buttonCallback","onClick","Welcome","callback","id","ConnectSlider","slider","sliderCharacteristic","supportsBluetooth","connectToDevice","PRIMARY_SERVICE","setIsConnected","a","navigator","bluetooth","requestDevice","acceptAllDevices","optionalServices","addEventListener","event","onDisconnected","gatt","connect","server","getPrimaryService","service","getCharacteristic","characteristic","console","log","alert","target","disconnectFromDevice","disconnect","stopSlider","sendSliderCommand","moveSliderLeft","moveSliderRight","moveSliderHome","setSliderAcceleration","acceleration","setSliderSpeed","command","charArray","i","length","charCodeAt","writeValue","Uint8Array","of","SetSliderBoundaries","isLeftBoundary","setLeftBoundary","setRightBoundary","className","onMouseDown","onMouseUp","SetupSlider","isConnected","setIsLeftBoundary","setIsRightBoundary","NavBar","WideButton","SliderController","title","onChangeFunc","defaultVal","SliderWithTooltip","createSliderWithTooltip","Slider","onAfterChange","defaultValue","trackStyle","backgroundColor","height","handleStyle","borderColor","borderWidth","width","marginTop","railStyle","tipProps","placement","SliderControls","useState","setSupportsBluetooth","isRightBoundary","isSliderSetUp","setIsSliderSetUp","useEffect","SliderSetup","App","onWelcome","setOnWelcome","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mXAYeA,MAJf,YAA+D,IAAtCC,EAAqC,EAArCA,WAAYC,EAAyB,EAAzBA,eACnC,OAAO,wBAAQC,QAAS,kBAAMD,KAAvB,SAA0CD,K,MCSpCG,MAVf,YAAuC,IAApBC,EAAmB,EAAnBA,SACjB,OACE,0BAASC,GAAG,oBAAZ,UACE,2CACA,yCACA,cAAC,EAAD,CAAeL,WAAW,WAAWC,eAAgBG,QCoB5CE,ICjCJC,EACPC,EDgCWF,EAzBf,YAAuE,IAA9CG,EAA6C,EAA7CA,kBAAmBC,EAA0B,EAA1BA,gBAC1C,OACE,eAAC,WAAD,WACE,oDACCD,EACC,eAAC,WAAD,WACE,mFACA,cAAC,EAAD,CACET,WAAW,UACXC,eAAgBS,OAIpB,eAAC,WAAD,WACE,0HAIA,oG,wBCvBJC,EAAkB,uCAKXD,EAAe,uCAAG,WAC7BE,GAD6B,mBAAAC,EAAA,+EAKZC,UAAUC,UAAUC,cAAc,CAC/CC,kBAAkB,EAClBC,iBAAkB,CAACP,KAPM,WAK3BJ,EAL2B,QAWpBY,iBAAiB,0BAA0B,SAACC,GACjDC,EAAeD,EAAOR,OAIpBL,EAAOe,KAhBgB,iCAiBJf,EAAOe,KAAKC,UAjBR,cAiBnBC,EAjBmB,OAoBzBZ,GAAe,GApBU,UAuBHY,EAAOC,kBAAkBd,GAvBtB,eAuBnBe,EAvBmB,iBA0BIA,EAAQC,kBA9BZ,wCAIA,QA0BnBC,EA1BmB,OA8BzBpB,EAAuBoB,EA9BE,0DAiC3BC,QAAQC,IAAR,qCAjC2B,0DAAH,sDAwCtBT,EAAiB,SACrBD,EACAR,GAEAmB,MAAM,cAAD,OAAeX,EAAMY,OAArB,qBACLpB,GAAe,IAGJqB,EAAuB,WAClCJ,QAAQC,IAAIvB,GACRA,EAAOe,MACTf,EAAOe,KAAKY,cAMHC,EAAa,WACxBC,EAAkB,UAGPC,EAAiB,WAC5BD,EAAkB,UAGPE,EAAkB,WAC7BF,EAAkB,UAiBPG,EAAiB,WAC5BH,EAAkB,UAGPI,EAAwB,SAACC,GAEpCL,EADmB,eAAWK,EAAX,OAIRC,EAAiB,SAACD,GAE7BL,EADmB,eAAWK,EAAX,OAgBrB,SAASL,EAAkBO,GAEzB,IADA,IAAMC,EAAsB,GACnBC,EAAI,EAAGA,EAAIF,EAAQG,OAAQD,IAClCD,EAAUC,GAAKF,EAAQI,WAAWF,GAEpCrC,EAAqBwC,WAAWC,WAAWC,GAAX,MAAAD,WAAiBL,I,iBCnCpCO,MAvEf,YAIW,IAHTC,EAGQ,EAHRA,eACAC,EAEQ,EAFRA,gBACAC,EACQ,EADRA,iBAEA,OACE,eAAC,WAAD,WACE,gDACEF,EAgCA,eAAC,WAAD,WACE,yGAIA,0BAASG,UAAU,yBAAnB,UACE,0BAASA,UAAU,mBAAnB,UACE,wBACEA,UAAU,kBACVC,YAAanB,EACboB,UAAWtB,EAHb,SAIE,cAAC,IAAD,CAAaoB,UAAU,2BAEzB,wBACEA,UAAU,kBACVC,YAAalB,EACbmB,UAAWtB,EAHb,SAIE,cAAC,IAAD,CAAcoB,UAAU,8BAG5B,cAAC,EAAD,CACEvD,WAAW,qBACXC,eAAgBqD,UArDtB,eAAC,WAAD,WACE,uGAIA,wGAIA,0BAASC,UAAU,yBAAnB,UACE,0BAASA,UAAU,mBAAnB,UACE,wBACEA,UAAU,kBACVC,YAAanB,EACboB,UAAWtB,EAHb,SAIE,cAAC,IAAD,CAAaoB,UAAU,2BAEzB,wBACEA,UAAU,kBACVC,YAAalB,EACbmB,UAAWtB,EAHb,SAIE,cAAC,IAAD,CAAcoB,UAAU,8BAG5B,cAAC,EAAD,CACEvD,WAAW,oBACXC,eAAgBoD,cCDfK,MAhCf,YAOW,IANTjD,EAMQ,EANRA,kBACAkD,EAKQ,EALRA,YACA/C,EAIQ,EAJRA,eACAwC,EAGQ,EAHRA,eACAQ,EAEQ,EAFRA,kBACAC,EACQ,EADRA,mBAEA,OACE,yBAASxD,GAAG,kBAAZ,SACIsD,EAQA,cAAC,EAAD,CACEP,eAAgBA,EAChBC,gBAAiB,YFuCI,SAC7BO,GAEAxB,EAAkB,SAClBwB,GAAkB,GE1CRP,CAAgBO,IAElBN,iBAAkB,YF2CI,SAC9BO,GAEAzB,EAAkB,SAClByB,GAAmB,GE9CTP,CAAiBO,MAbrB,cAAC,EAAD,CACEpD,kBAAmBA,EACnBC,gBAAiB,WACfA,EAAgBE,S,MCrBbkD,MARf,WACE,OACE,yBAASzD,GAAG,mBAAZ,SACE,4C,MCUS0D,MARf,YAA4D,IAAtC/D,EAAqC,EAArCA,WAAYC,EAAyB,EAAzBA,eAChC,OACE,wBAAQsD,UAAU,cAAcrD,QAAS,kBAAMD,KAA/C,SACGD,K,oBC4BQgE,MA5Bf,YAAuE,IAA3CC,EAA0C,EAA1CA,MAAOC,EAAmC,EAAnCA,aAAcC,EAAqB,EAArBA,WACzCC,EAAoBC,YAAwBC,KAElD,OACE,0BAASf,UAAU,8BAAnB,UACE,6BAAKU,IACL,cAACG,EAAD,CACEb,UAAU,2BACVgB,cAAeL,EACfM,aAAcL,EACdM,WAAY,CAAEC,gBAAiB,qBAAsBC,OAAQ,GAC7DC,YAAa,CACXC,YAAa,QACbC,YAAa,EACbH,OAAQ,GACRI,MAAO,GACPC,WAAY,GACZN,gBAAiB,mBAEnBO,UAAW,CAAEP,gBAAiB,qBAAsBC,OAAQ,GAC5DO,SAAU,CACRC,UAAW,gB,cCyBNC,MAzCf,WACE,OACE,0BAAS/E,GAAG,qBAAZ,UACE,cAAC,EAAD,IACA,cAAC,EAAD,CACEL,WAAW,kBACXC,eAAgB,WACd8B,MAAM,sBAGV,cAAC,EAAD,CACEkC,MAAM,eACNC,aAAc1B,EACd2B,WAAY,KAEd,cAAC,EAAD,CACEF,MAAM,QACNC,aAAcxB,EACdyB,WAAY,KAEd,0BAASZ,UAAU,8BAAnB,UACE,wBACEA,UAAU,gBACVC,YAAanB,EACboB,UAAWtB,EAHb,SAIE,cAAC,IAAD,CAAaoB,UAAU,yBAEzB,wBAAQA,UAAU,gBAAgBrD,QAASqC,EAA3C,SACE,cAAC,IAAD,CAAWgB,UAAU,yBAEvB,wBACEA,UAAU,gBACVC,YAAalB,EACbmB,UAAWtB,EAHb,SAIE,cAAC,IAAD,CAAcoB,UAAU,gC,MCFnBS,MAzCf,WAA6B,IAAD,EACwBqB,oBAAkB,GAD1C,mBACnB5E,EADmB,KACA6E,EADA,OAEYD,oBAAkB,GAF9B,mBAEnB1B,EAFmB,KAEN/C,EAFM,OAGkByE,oBAAkB,GAHpC,mBAGnBjC,EAHmB,KAGHQ,EAHG,OAIoByB,oBAAkB,GAJtC,mBAInBE,EAJmB,KAIF1B,EAJE,OAKgBwB,oBAAkB,GALlC,mBAKnBG,EALmB,KAKJC,EALI,KAmB1B,OAZAC,qBAAU,WACJ5E,UAAUC,WACZuE,GAAqB,KAEtB,IAEHI,qBAAU,WACJ/B,GAAeP,GAAkBmC,GACnCE,GAAiB,KAElB,CAAC9B,EAAaP,EAAgBmC,IAG/B,eAAC,WAAD,WACE,cAAC,EAAD,CACEvF,WAAW,aACXC,eAAgBgC,IAEhBuD,EAUA,cAAC,EAAD,IATA,cAACG,EAAD,CACElF,kBAAmBA,EACnBkD,YAAaA,EACb/C,eAAgBA,EAChBwC,eAAgBA,EAChBQ,kBAAmBA,EACnBC,mBAAoBA,Q,MChBf+B,MAlBf,WAAgB,IAAD,EACqBP,oBAAS,GAD9B,mBACNQ,EADM,KACKC,EADL,KAOb,OACE,qBAAKvC,UAAU,MAAf,SACGsC,EACC,cAAC,EAAD,CAASzF,SAPS,WACtB0F,GAAa,MAQT,cAAC,EAAD,OCbRC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.ce33c365.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./PrimaryButton.css\";\n\ntype Props = {\n  buttonText: string;\n  buttonCallback: () => void;\n};\n\nfunction PrimaryButton({ buttonText, buttonCallback }: Props) {\n  return <button onClick={() => buttonCallback()}>{buttonText}</button>;\n}\n\nexport default PrimaryButton;\n","import React from \"react\";\nimport PrimaryButton from \"../common/PrimaryButton\";\nimport \"./Welcome.css\";\n\ntype Props = {\n  callback: () => void;\n};\n\nfunction Welcome({ callback }: Props) {\n  return (\n    <section id=\"welcome-container\">\n      <p>Welcome to</p>\n      <h1>sliderr</h1>\n      <PrimaryButton buttonText=\"continue\" buttonCallback={callback} />\n    </section>\n  );\n}\n\nexport default Welcome;\n","import React, { Fragment } from \"react\";\nimport PrimaryButton from \"../../common/PrimaryButton\";\n\ntype Props = {\n  supportsBluetooth: boolean;\n  connectToDevice: () => void;\n};\n\nfunction ConnectSlider({ supportsBluetooth, connectToDevice }: Props) {\n  return (\n    <Fragment>\n      <h1>connect to sliderr</h1>\n      {supportsBluetooth ? (\n        <Fragment>\n          <p>Yay! It looks like your device supports Bluetooth.</p>\n          <PrimaryButton\n            buttonText=\"connect\"\n            buttonCallback={connectToDevice}\n          />\n        </Fragment>\n      ) : (\n        <Fragment>\n          <p>\n            Shoot! It looks like Bluetooth is not supported. Try using a\n            different device or browser.\n          </p>\n          <p>Typically using Chrome on a computer or Android phone works.</p>\n        </Fragment>\n      )}\n    </Fragment>\n  );\n}\n\nexport default ConnectSlider;\n","export let slider: BluetoothDevice;\nlet sliderCharacteristic: BluetoothRemoteGATTCharacteristic;\n\nconst PRIMARY_SERVICE = \"0000ffe0-0000-1000-8000-00805f9b34fb\";\nconst PRIMARY_CHARACTERISTIC = \"0000ffe1-0000-1000-8000-00805f9b34fb\";\n\n// ---- Bluetooth ----\n\nexport const connectToDevice = async (\n  setIsConnected: (state: boolean) => void\n) => {\n  try {\n    // Search for Bluetooth devices that advertise a battery service\n    slider = await navigator.bluetooth.requestDevice({\n      acceptAllDevices: true,\n      optionalServices: [PRIMARY_SERVICE],\n    });\n\n    // Add an event listener to detect when a device disconnects\n    slider.addEventListener(\"gattserverdisconnected\", (event) => {\n      onDisconnected(event, setIsConnected);\n    });\n\n    // Try to connect to the remote GATT Server running on the Bluetooth device\n    if (slider.gatt) {\n      const server = await slider.gatt.connect();\n\n      // Set SliderController component state\n      setIsConnected(true);\n\n      // Get the battery service from the Bluetooth device\n      const service = await server.getPrimaryService(PRIMARY_SERVICE);\n\n      // Get the slider characteristic from the Bluetooth device\n      const characteristic = await service.getCharacteristic(\n        PRIMARY_CHARACTERISTIC\n      );\n\n      sliderCharacteristic = characteristic;\n    }\n  } catch (error) {\n    console.log(`There was an error: ${error}`);\n  }\n};\n\n/**\n * Let the user know when their device has been disconnected.\n */\nconst onDisconnected = (\n  event: Event,\n  setIsConnected: (state: boolean) => void\n) => {\n  alert(`The device ${event.target} is disconnected`);\n  setIsConnected(false);\n};\n\nexport const disconnectFromDevice = () => {\n  console.log(slider);\n  if (slider.gatt) {\n    slider.gatt.disconnect();\n  }\n};\n\n// ---- Slider Commands ----\n\nexport const stopSlider = () => {\n  sendSliderCommand(\"stop!\");\n};\n\nexport const moveSliderLeft = () => {\n  sendSliderCommand(\"movL!\");\n};\n\nexport const moveSliderRight = () => {\n  sendSliderCommand(\"movR!\");\n};\n\nexport const setLeftBoundary = (\n  setIsLeftBoundary: (state: boolean) => void\n) => {\n  sendSliderCommand(\"setL!\");\n  setIsLeftBoundary(true);\n};\n\nexport const setRightBoundary = (\n  setIsRightBoundary: (state: boolean) => void\n) => {\n  sendSliderCommand(\"setR!\");\n  setIsRightBoundary(true);\n};\n\nexport const moveSliderHome = () => {\n  sendSliderCommand(\"home!\");\n};\n\nexport const setSliderAcceleration = (acceleration: number) => {\n  const commandString = `setA:${acceleration}!`;\n  sendSliderCommand(commandString);\n};\n\nexport const setSliderSpeed = (acceleration: number) => {\n  const commandString = `setS:${acceleration}!`;\n  sendSliderCommand(commandString);\n};\n\nexport const setMoveInPoint = () => {\n  sendSliderCommand(\"setI!\");\n};\n\nexport const setMoveOutPoint = () => {\n  sendSliderCommand(\"setO!\");\n};\n\nexport const runMove = () => {\n  sendSliderCommand(\"runM!\");\n};\n\nfunction sendSliderCommand(command: string) {\n  const charArray: number[] = [];\n  for (let i = 0; i < command.length; i++) {\n    charArray[i] = command.charCodeAt(i);\n  }\n  sliderCharacteristic.writeValue(Uint8Array.of(...charArray));\n}\n","import React, { Fragment } from \"react\";\nimport PrimaryButton from \"../../common/PrimaryButton\";\nimport {\n  stopSlider,\n  moveSliderLeft,\n  moveSliderRight,\n} from \"../../../slider/bluetooth\";\nimport { HiArrowLeft, HiArrowRight } from \"react-icons/hi\";\nimport \"./SetSliderBoundaries.css\";\n\ntype Props = {\n  isLeftBoundary: boolean;\n  setLeftBoundary: () => void;\n  setRightBoundary: () => void;\n};\n\nfunction SetSliderBoundaries({\n  isLeftBoundary,\n  setLeftBoundary,\n  setRightBoundary,\n}: Props) {\n  return (\n    <Fragment>\n      <h1>Set Boundaries</h1>\n      {!isLeftBoundary ? (\n        <Fragment>\n          <p>\n            Before you can use the slider you need to manually set its\n            boundaries.\n          </p>\n          <p>\n            Please move the slider to the left edge and then set the left\n            boundary.\n          </p>\n          <section className=\"set-boundary-container\">\n            <section className=\"button-container\">\n              <button\n                className=\"circle-button-2\"\n                onMouseDown={moveSliderLeft}\n                onMouseUp={stopSlider}>\n                <HiArrowLeft className=\"circle-button-icon-2\" />\n              </button>\n              <button\n                className=\"circle-button-2\"\n                onMouseDown={moveSliderRight}\n                onMouseUp={stopSlider}>\n                <HiArrowRight className=\"circle-button-icon-2\" />\n              </button>\n            </section>\n            <PrimaryButton\n              buttonText=\"set left boundary\"\n              buttonCallback={setLeftBoundary}\n            />\n          </section>\n        </Fragment>\n      ) : (\n        <Fragment>\n          <p>\n            Great! Now move the slider to the right edge and set the right\n            boundary.\n          </p>\n          <section className=\"set-boundary-container\">\n            <section className=\"button-container\">\n              <button\n                className=\"circle-button-2\"\n                onMouseDown={moveSliderLeft}\n                onMouseUp={stopSlider}>\n                <HiArrowLeft className=\"circle-button-icon-2\" />\n              </button>\n              <button\n                className=\"circle-button-2\"\n                onMouseDown={moveSliderRight}\n                onMouseUp={stopSlider}>\n                <HiArrowRight className=\"circle-button-icon-2\" />\n              </button>\n            </section>\n            <PrimaryButton\n              buttonText=\"set right boundary\"\n              buttonCallback={setRightBoundary}\n            />\n          </section>\n        </Fragment>\n      )}\n    </Fragment>\n  );\n}\n\nexport default SetSliderBoundaries;\n","import React from \"react\";\nimport ConnectSlider from \"./ConnectSlider\";\nimport SetSliderBoundaries from \"./SetSliderBoundaries\";\nimport {\n  connectToDevice,\n  setLeftBoundary,\n  setRightBoundary,\n} from \"../../../slider/bluetooth\";\n\ntype Props = {\n  supportsBluetooth: boolean;\n  isConnected: boolean;\n  setIsConnected: (connected: boolean) => void;\n  isLeftBoundary: boolean;\n  setIsLeftBoundary: (leftBoundary: boolean) => void;\n  setIsRightBoundary: (rightBoundary: boolean) => void;\n};\n\nfunction SetupSlider({\n  supportsBluetooth,\n  isConnected,\n  setIsConnected,\n  isLeftBoundary,\n  setIsLeftBoundary,\n  setIsRightBoundary,\n}: Props) {\n  return (\n    <section id=\"setup-container\">\n      {!isConnected ? (\n        <ConnectSlider\n          supportsBluetooth={supportsBluetooth}\n          connectToDevice={() => {\n            connectToDevice(setIsConnected);\n          }}\n        />\n      ) : (\n        <SetSliderBoundaries\n          isLeftBoundary={isLeftBoundary}\n          setLeftBoundary={() => {\n            setLeftBoundary(setIsLeftBoundary);\n          }}\n          setRightBoundary={() => {\n            setRightBoundary(setIsRightBoundary);\n          }}\n        />\n      )}\n    </section>\n  );\n}\n\nexport default SetupSlider;\n","import React from \"react\";\nimport \"./NavBar.css\";\n\nfunction NavBar() {\n  return (\n    <section id=\"navbar-container\">\n      <h1>sliderr</h1>\n    </section>\n  );\n}\n\nexport default NavBar;\n","import React from \"react\";\nimport \"./WideButton.css\";\n\ntype Props = {\n  buttonText: string;\n  buttonCallback: () => void;\n};\n\nfunction WideButton({ buttonText, buttonCallback }: Props) {\n  return (\n    <button className=\"wide-button\" onClick={() => buttonCallback()}>\n      {buttonText}\n    </button>\n  );\n}\n\nexport default WideButton;\n","import React from \"react\";\nimport Slider, { createSliderWithTooltip } from \"rc-slider\";\nimport \"rc-slider/assets/index.css\";\nimport \"./SliderController.css\";\n\ntype Props = {\n  title: string;\n  onChangeFunc: (val: number) => void;\n  defaultVal?: number;\n};\n\nfunction SliderController({ title, onChangeFunc, defaultVal }: Props) {\n  const SliderWithTooltip = createSliderWithTooltip(Slider);\n\n  return (\n    <section className=\"slider-controller-container\">\n      <h2>{title}</h2>\n      <SliderWithTooltip\n        className=\"slider-controller-slider\"\n        onAfterChange={onChangeFunc}\n        defaultValue={defaultVal}\n        trackStyle={{ backgroundColor: \"rgb(250, 250, 250)\", height: 3 }}\n        handleStyle={{\n          borderColor: \"white\",\n          borderWidth: 3,\n          height: 28,\n          width: 28,\n          marginTop: -13,\n          backgroundColor: \"rgb(27, 28, 31)\",\n        }}\n        railStyle={{ backgroundColor: \"rgb(230, 230, 230)\", height: 2 }}\n        tipProps={{\n          placement: \"bottom\",\n        }}\n      />\n    </section>\n  );\n}\n\nexport default SliderController;\n","import React from \"react\";\nimport NavBar from \"../../common/NavBar\";\nimport WideButton from \"../../common/WideButton\";\nimport SliderController from \"./SliderController\";\nimport {\n  stopSlider,\n  moveSliderLeft,\n  moveSliderRight,\n  moveSliderHome,\n  setSliderAcceleration,\n  setSliderSpeed,\n} from \"../../../slider/bluetooth\";\nimport { HiArrowLeft, HiArrowRight } from \"react-icons/hi\";\nimport { BiHomeAlt } from \"react-icons/bi\";\nimport \"./SliderControls.css\";\n\nfunction SliderControls() {\n  return (\n    <section id=\"controls-container\">\n      <NavBar />\n      <WideButton\n        buttonText=\"Create New Move\"\n        buttonCallback={() => {\n          alert(\"create new move\");\n        }}\n      />\n      <SliderController\n        title=\"Acceleration\"\n        onChangeFunc={setSliderAcceleration}\n        defaultVal={75}\n      />\n      <SliderController\n        title=\"Speed\"\n        onChangeFunc={setSliderSpeed}\n        defaultVal={35}\n      />\n      <section className=\"left-right-button-container\">\n        <button\n          className=\"circle-button\"\n          onMouseDown={moveSliderLeft}\n          onMouseUp={stopSlider}>\n          <HiArrowLeft className=\"circle-button-icon\" />\n        </button>\n        <button className=\"circle-button\" onClick={moveSliderHome}>\n          <BiHomeAlt className=\"circle-button-icon\" />\n        </button>\n        <button\n          className=\"circle-button\"\n          onMouseDown={moveSliderRight}\n          onMouseUp={stopSlider}>\n          <HiArrowRight className=\"circle-button-icon\" />\n        </button>\n      </section>\n    </section>\n  );\n}\n\nexport default SliderControls;\n","import React, { Fragment, useEffect, useState } from \"react\";\nimport SliderSetup from \"./setup/SliderSetup\";\nimport SliderControls from \"./controls/SliderControls\";\nimport PrimaryButton from \"../common/PrimaryButton\";\nimport { disconnectFromDevice } from \"../../slider/bluetooth\";\nimport \"./SliderController.css\";\n\nfunction SliderController() {\n  const [supportsBluetooth, setSupportsBluetooth] = useState<boolean>(false);\n  const [isConnected, setIsConnected] = useState<boolean>(false);\n  const [isLeftBoundary, setIsLeftBoundary] = useState<boolean>(false);\n  const [isRightBoundary, setIsRightBoundary] = useState<boolean>(false);\n  const [isSliderSetUp, setIsSliderSetUp] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (navigator.bluetooth) {\n      setSupportsBluetooth(true);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (isConnected && isLeftBoundary && isRightBoundary) {\n      setIsSliderSetUp(true);\n    }\n  }, [isConnected, isLeftBoundary, isRightBoundary]);\n\n  return (\n    <Fragment>\n      <PrimaryButton\n        buttonText=\"Disconnect\"\n        buttonCallback={disconnectFromDevice}\n      />\n      {!isSliderSetUp ? (\n        <SliderSetup\n          supportsBluetooth={supportsBluetooth}\n          isConnected={isConnected}\n          setIsConnected={setIsConnected}\n          isLeftBoundary={isLeftBoundary}\n          setIsLeftBoundary={setIsLeftBoundary}\n          setIsRightBoundary={setIsRightBoundary}\n        />\n      ) : (\n        <SliderControls />\n      )}\n    </Fragment>\n  );\n}\n\nexport default SliderController;\n","import React, { useState } from \"react\";\nimport Welcome from \"./welcome/Welcome\";\nimport SliderController from \"./controller/SliderController\";\nimport \"./App.css\";\n\nfunction App() {\n  const [onWelcome, setOnWelcome] = useState(true);\n\n  const welcomeCallback = () => {\n    setOnWelcome(false);\n  };\n\n  return (\n    <div className=\"App\">\n      {onWelcome ? (\n        <Welcome callback={welcomeCallback} />\n      ) : (\n        <SliderController />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}