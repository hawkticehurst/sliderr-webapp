{"version":3,"sources":["components/common/PrimaryButton.tsx","components/welcome/Welcome.tsx","components/controller/setup/ConnectSlider.tsx","components/controller/setup/SetSliderBoundaries.tsx","slider/bluetooth.ts","components/controller/setup/SliderSetup.tsx","components/common/NavBar.tsx","components/common/WideButton.tsx","components/controller/controls/SliderController.tsx","components/controller/controls/SliderControls.tsx","components/controller/SliderController.tsx","components/App.tsx","index.tsx"],"names":["PrimaryButton","buttonText","buttonCallback","onClick","Welcome","callback","id","ConnectSlider","supportsBluetooth","connectToDevice","SetSliderBoundaries","slider","isLeftBoundary","setLeftBoundary","setRightBoundary","className","setIsConnected","a","navigator","bluetooth","requestDevice","acceptAllDevices","addEventListener","event","onDisconnected","gatt","connect","server","getPrimaryService","service","getCharacteristic","characteristic","startNotifications","handleCharacteristicValueChanged","readValue","reading","console","log","alert","target","SetupSlider","isConnected","setIsLeftBoundary","setIsRightBoundary","NavBar","WideButton","SliderController","title","defaultVal","SliderWithTooltip","createSliderWithTooltip","Slider","defaultValue","trackStyle","backgroundColor","height","handleStyle","borderColor","borderWidth","width","marginTop","railStyle","tipProps","placement","SliderControls","useState","setSupportsBluetooth","isRightBoundary","isSliderSetUp","setIsSliderSetUp","useEffect","SliderSetup","App","onWelcome","setOnWelcome","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.deb50ebe.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./PrimaryButton.css\";\n\ntype Props = {\n  buttonText: string;\n  buttonCallback: () => void;\n};\n\nfunction PrimaryButton({ buttonText, buttonCallback }: Props) {\n  return <button onClick={() => buttonCallback()}>{buttonText}</button>;\n}\n\nexport default PrimaryButton;\n","import React from \"react\";\nimport PrimaryButton from \"../common/PrimaryButton\";\nimport \"./Welcome.css\";\n\ntype Props = {\n  callback: () => void;\n};\n\nfunction Welcome({ callback }: Props) {\n  return (\n    <section id=\"welcome-container\">\n      <p>Welcome to</p>\n      <h1>sliderr</h1>\n      <PrimaryButton buttonText=\"continue\" buttonCallback={callback} />\n    </section>\n  );\n}\n\nexport default Welcome;\n","import React, { Fragment } from \"react\";\nimport PrimaryButton from \"../../common/PrimaryButton\";\n\ntype Props = {\n  supportsBluetooth: boolean;\n  connectToDevice: () => void;\n};\n\nfunction ConnectSlider({ supportsBluetooth, connectToDevice }: Props) {\n  return (\n    <Fragment>\n      <h1>connect to sliderr</h1>\n      {supportsBluetooth ? (\n        <Fragment>\n          <p>Yay! It looks like your device supports Bluetooth.</p>\n          <PrimaryButton\n            buttonText=\"connect\"\n            buttonCallback={connectToDevice}\n          />\n        </Fragment>\n      ) : (\n        <Fragment>\n          <p>\n            Shoot! It looks like your device or browser does not support\n            Bluetooth.\n          </p>\n          <p>Try using a different device or browser (such as Chrome).</p>\n        </Fragment>\n      )}\n    </Fragment>\n  );\n}\n\nexport default ConnectSlider;\n","import React, { Fragment } from \"react\";\nimport PrimaryButton from \"../../common/PrimaryButton\";\nimport { HiArrowLeft, HiArrowRight } from \"react-icons/hi\";\nimport \"./SetSliderBoundaries.css\";\n\ntype Props = {\n  isLeftBoundary: boolean;\n  setLeftBoundary: () => void;\n  setRightBoundary: () => void;\n};\n\nfunction SetSliderBoundaries({\n  isLeftBoundary,\n  setLeftBoundary,\n  setRightBoundary,\n}: Props) {\n  return (\n    <Fragment>\n      <h1>Set Boundaries</h1>\n      {!isLeftBoundary ? (\n        <Fragment>\n          <p>\n            Before you can use the slider you need to manually set its\n            boundaries.\n          </p>\n          <p>\n            Please move the slider to the left edge and then set the left\n            boundary.\n          </p>\n          <section className=\"set-boundary-button-container\">\n            <button className=\"circle-button-2\">\n              <HiArrowLeft className=\"circle-button-icon-2\" />\n            </button>\n            <PrimaryButton\n              buttonText=\"set left boundary\"\n              buttonCallback={setLeftBoundary}\n            />\n          </section>\n        </Fragment>\n      ) : (\n        <Fragment>\n          <p>\n            Great! Now move the slider to the right edge and set the right\n            boundary.\n          </p>\n          <section className=\"set-boundary-button-container\">\n            <button className=\"circle-button-2\">\n              <HiArrowRight className=\"circle-button-icon-2\" />\n            </button>\n            <PrimaryButton\n              buttonText=\"set right boundary\"\n              buttonCallback={setRightBoundary}\n            />\n          </section>\n        </Fragment>\n      )}\n    </Fragment>\n  );\n}\n\nexport default SetSliderBoundaries;\n","export let slider: BluetoothDevice;\n\nexport const connectToDevice = async (\n  setIsConnected: (state: boolean) => void\n) => {\n  try {\n    // Search for Bluetooth devices that advertise a battery service\n    slider = await navigator.bluetooth.requestDevice({\n      acceptAllDevices: true,\n    });\n\n    setIsConnected(true);\n\n    // Add an event listener to detect when a device disconnects\n    slider.addEventListener(\"gattserverdisconnected\", (event) => {\n      onDisconnected(event, setIsConnected);\n    });\n\n    // Try to connect to the remote GATT Server running on the Bluetooth device\n    if (slider.gatt) {\n      const server = await slider.gatt.connect();\n\n      // Get the battery service from the Bluetooth device\n      const service = await server.getPrimaryService(\"battery_service\");\n\n      // Get the battery level characteristic from the Bluetooth device\n      const characteristic = await service.getCharacteristic(\"battery_level\");\n\n      // Subscribe to battery level notifications\n      characteristic.startNotifications();\n\n      // When the battery level changes, call a function\n      characteristic.addEventListener(\n        \"characteristicvaluechanged\",\n        handleCharacteristicValueChanged\n      );\n\n      // Read the battery level value\n      const reading = await characteristic.readValue();\n\n      console.log(reading);\n    }\n    // Show the initial reading on the web page\n    // setBatteryLevel(reading.getUint8(0) + '%');\n  } catch (error) {\n    console.log(`There was an error: ${error}`);\n  }\n};\n\n/**\n * Let the user know when their device has been disconnected.\n */\nconst onDisconnected = (\n  event: Event,\n  setIsConnected: (state: boolean) => void\n) => {\n  alert(`The device ${event.target} is disconnected`);\n  setIsConnected(false);\n};\n\n/**\n * Update the value shown on the web page when a notification is\n * received.\n */\nconst handleCharacteristicValueChanged = (event: Event) => {\n  console.log(\"handleCharacteristicValueChanged\");\n  // console.log(event.target.value.getUint8(0));\n  // setBatteryLevel(event.target.value.getUint8(0) + '%');\n};\n\nexport const setLeftBoundary = (\n  setIsLeftBoundary: (state: boolean) => void\n) => {\n  setIsLeftBoundary(true);\n};\n\nexport const setRightBoundary = (\n  setIsRightBoundary: (state: boolean) => void\n) => {\n  setIsRightBoundary(true);\n};\n","import React from \"react\";\nimport ConnectSlider from \"./ConnectSlider\";\nimport SetSliderBoundaries from \"./SetSliderBoundaries\";\nimport {\n  connectToDevice,\n  setLeftBoundary,\n  setRightBoundary,\n} from \"../../../slider/bluetooth\";\n\ntype Props = {\n  supportsBluetooth: boolean;\n  isConnected: boolean;\n  setIsConnected: (connected: boolean) => void;\n  isLeftBoundary: boolean;\n  setIsLeftBoundary: (leftBoundary: boolean) => void;\n  setIsRightBoundary: (rightBoundary: boolean) => void;\n};\n\nfunction SetupSlider({\n  supportsBluetooth,\n  isConnected,\n  setIsConnected,\n  isLeftBoundary,\n  setIsLeftBoundary,\n  setIsRightBoundary,\n}: Props) {\n  return (\n    <section id=\"setup-container\">\n      {!isConnected ? (\n        <ConnectSlider\n          supportsBluetooth={supportsBluetooth}\n          connectToDevice={() => {\n            connectToDevice(setIsConnected);\n          }}\n        />\n      ) : (\n        <SetSliderBoundaries\n          isLeftBoundary={isLeftBoundary}\n          setLeftBoundary={() => {\n            setLeftBoundary(setIsLeftBoundary);\n          }}\n          setRightBoundary={() => {\n            setRightBoundary(setIsRightBoundary);\n          }}\n        />\n      )}\n    </section>\n  );\n}\n\nexport default SetupSlider;\n","import React from \"react\";\nimport \"./NavBar.css\";\n\nfunction NavBar() {\n  return (\n    <section id=\"navbar-container\">\n      <h1>sliderr</h1>\n    </section>\n  );\n}\n\nexport default NavBar;\n","import React from \"react\";\nimport \"./WideButton.css\";\n\ntype Props = {\n  buttonText: string;\n  buttonCallback: () => void;\n};\n\nfunction WideButton({ buttonText, buttonCallback }: Props) {\n  return (\n    <button className=\"wide-button\" onClick={() => buttonCallback()}>\n      {buttonText}\n    </button>\n  );\n}\n\nexport default WideButton;\n","import React from \"react\";\nimport Slider, { createSliderWithTooltip } from \"rc-slider\";\nimport \"rc-slider/assets/index.css\";\nimport \"./SliderController.css\";\n\ntype Props = {\n  title: string;\n  defaultVal?: number;\n};\n\nfunction SliderController({ title, defaultVal }: Props) {\n  const SliderWithTooltip = createSliderWithTooltip(Slider);\n\n  return (\n    <section className=\"slider-controller-container\">\n      <h2>{title}</h2>\n      <SliderWithTooltip\n        className=\"slider-controller-slider\"\n        defaultValue={defaultVal}\n        trackStyle={{ backgroundColor: \"rgb(250, 250, 250)\", height: 3 }}\n        handleStyle={{\n          borderColor: \"white\",\n          borderWidth: 3,\n          height: 28,\n          width: 28,\n          marginTop: -13,\n          backgroundColor: \"rgb(27, 28, 31)\",\n        }}\n        railStyle={{ backgroundColor: \"rgb(230, 230, 230)\", height: 2 }}\n        tipProps={{\n          placement: \"bottom\",\n        }}\n      />\n    </section>\n  );\n}\n\nexport default SliderController;\n","import React from \"react\";\nimport NavBar from \"../../common/NavBar\";\nimport WideButton from \"../../common/WideButton\";\nimport SliderController from \"./SliderController\";\nimport { HiArrowLeft, HiArrowRight } from \"react-icons/hi\";\nimport { BiHomeAlt } from \"react-icons/bi\";\nimport \"./SliderControls.css\";\n\nfunction SliderControls() {\n  return (\n    <section id=\"controls-container\">\n      <NavBar />\n      <WideButton\n        buttonText=\"Create New Move\"\n        buttonCallback={() => {\n          alert(\"create new move\");\n        }}\n      />\n      <SliderController title=\"Acceleration\" defaultVal={75} />\n      <SliderController title=\"Speed\" defaultVal={35} />\n      <section className=\"left-right-button-container\">\n        <button className=\"circle-button\">\n          <HiArrowLeft className=\"circle-button-icon\" />\n        </button>\n        <button className=\"circle-button\">\n          <BiHomeAlt className=\"circle-button-icon\" />\n        </button>\n        <button className=\"circle-button\">\n          <HiArrowRight className=\"circle-button-icon\" />\n        </button>\n      </section>\n    </section>\n  );\n}\n\nexport default SliderControls;\n","import React, { Fragment, useEffect, useState } from \"react\";\nimport SliderSetup from \"./setup/SliderSetup\";\nimport SliderControls from \"./controls/SliderControls\";\nimport \"./SliderController.css\";\n\nfunction SliderController() {\n  const [supportsBluetooth, setSupportsBluetooth] = useState<boolean>(false);\n  const [isConnected, setIsConnected] = useState<boolean>(true);\n  const [isLeftBoundary, setIsLeftBoundary] = useState<boolean>(false);\n  const [isRightBoundary, setIsRightBoundary] = useState<boolean>(false);\n  const [isSliderSetUp, setIsSliderSetUp] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (navigator.bluetooth) {\n      setSupportsBluetooth(true);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (isConnected && isLeftBoundary && isRightBoundary) {\n      setIsSliderSetUp(true);\n    }\n  }, [isConnected, isLeftBoundary, isRightBoundary]);\n\n  return (\n    <Fragment>\n      {!isSliderSetUp ? (\n        <SliderSetup\n          supportsBluetooth={supportsBluetooth}\n          isConnected={isConnected}\n          setIsConnected={setIsConnected}\n          isLeftBoundary={isLeftBoundary}\n          setIsLeftBoundary={setIsLeftBoundary}\n          setIsRightBoundary={setIsRightBoundary}\n        />\n      ) : (\n        <SliderControls />\n      )}\n    </Fragment>\n  );\n}\n\nexport default SliderController;\n","import React, { useState } from \"react\";\nimport Welcome from \"./welcome/Welcome\";\nimport SliderController from \"./controller/SliderController\";\nimport \"./App.css\";\n\nfunction App() {\n  const [onWelcome, setOnWelcome] = useState(true);\n\n  const welcomeCallback = () => {\n    setOnWelcome(false);\n  };\n\n  return (\n    <div className=\"App\">\n      {onWelcome ? (\n        <Welcome callback={welcomeCallback} />\n      ) : (\n        <SliderController />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}